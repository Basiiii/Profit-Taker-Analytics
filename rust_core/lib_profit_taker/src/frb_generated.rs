// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.7.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 2135135648;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__check_if_latest_run_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "check_if_latest_run",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::check_if_latest_run(api_run_id))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__check_run_exists_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "check_run_exists",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::check_run_exists(api_run_id))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__check_run_favorite_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "check_run_favorite",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::check_run_favorite(api_run_id))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__delete_run_from_db_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_run_from_db",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::delete_run_from_db(api_run_id))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__get_analytics_runs_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_analytics_runs",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_limit = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::get_analytics_runs(api_limit))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__get_average_times_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_average_times",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::get_average_times())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__get_earliest_run_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_earliest_run_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::get_earliest_run_id()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__get_latest_run_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_latest_run_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::get_latest_run_id()?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__get_next_run_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_next_run_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_current_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::get_next_run_id(api_current_run_id)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__get_paginated_runs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_paginated_runs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_page = <i32>::sse_decode(&mut deserializer);
            let api_page_size = <i32>::sse_decode(&mut deserializer);
            let api_sort_column = <String>::sse_decode(&mut deserializer);
            let api_sort_ascending = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::get_paginated_runs(
                        api_page,
                        api_page_size,
                        api_sort_column,
                        api_sort_ascending,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__get_pb_times_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_pb_times",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::get_pb_times())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__get_pretty_printed_run_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_pretty_printed_run",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_model = <crate::api::RunModel>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::get_pretty_printed_run(api_run_model))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__get_previous_run_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_previous_run_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_current_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::get_previous_run_id(api_current_run_id)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__get_run_from_db_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_run_from_db",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::get_run_from_db(api_run_id)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__get_second_best_times_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_second_best_times",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::get_second_best_times())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__initialize_converter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "initialize_converter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_storage_folder = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::initialize_converter(api_storage_folder)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__initialize_db_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "initialize_db",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::initialize_db(api_path)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__initialize_profit_taker_parser_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "initialize_profit_taker_parser",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::initialize_profit_taker_parser())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__is_run_pb_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_run_pb",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::is_run_pb(api_run_id))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__mark_run_as_favorite_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mark_run_as_favorite",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::mark_run_as_favorite(api_run_id))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__remove_run_from_favorites_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remove_run_from_favorites",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::remove_run_from_favorites(api_run_id))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__update_run_name_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_run_name",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_run_id = <i32>::sse_decode(&mut deserializer);
            let api_new_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::update_run_name(api_run_id, api_new_name))?;
                Ok(output_ok)
            })())
        },
    )
}

// Section: dart2rust

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::AnalyticsRunTotalTimesModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i32>::sse_decode(deserializer);
        let mut var_runName = <String>::sse_decode(deserializer);
        let mut var_totalTime = <f64>::sse_decode(deserializer);
        let mut var_totalFlightTime = <f64>::sse_decode(deserializer);
        let mut var_totalShieldTime = <f64>::sse_decode(deserializer);
        let mut var_totalLegTime = <f64>::sse_decode(deserializer);
        let mut var_totalBodyTime = <f64>::sse_decode(deserializer);
        let mut var_totalPylonTime = <f64>::sse_decode(deserializer);
        return crate::api::AnalyticsRunTotalTimesModel {
            id: var_id,
            run_name: var_runName,
            total_time: var_totalTime,
            total_flight_time: var_totalFlightTime,
            total_shield_time: var_totalShieldTime,
            total_leg_time: var_totalLegTime,
            total_body_time: var_totalBodyTime,
            total_pylon_time: var_totalPylonTime,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::DeleteRunResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_success = <bool>::sse_decode(deserializer);
        let mut var_error = <Option<String>>::sse_decode(deserializer);
        return crate::api::DeleteRunResult {
            success: var_success,
            error: var_error,
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::InitializeParserOutcome {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::InitializeParserOutcome::Success,
            1 => crate::api::InitializeParserOutcome::EnvironmentVariableError,
            2 => crate::api::InitializeParserOutcome::FileOpenError,
            3 => crate::api::InitializeParserOutcome::FileSeekError,
            4 => crate::api::InitializeParserOutcome::ThreadSpawnError,
            5 => crate::api::InitializeParserOutcome::UnknownError,
            _ => unreachable!("Invalid variant for InitializeParserOutcome: {}", inner),
        };
    }
}

impl SseDecode for crate::api::LegBreakModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_legBreakTime = <f64>::sse_decode(deserializer);
        let mut var_legPosition = <crate::api::LegPositionEnum>::sse_decode(deserializer);
        let mut var_legOrder = <i32>::sse_decode(deserializer);
        return crate::api::LegBreakModel {
            leg_break_time: var_legBreakTime,
            leg_position: var_legPosition,
            leg_order: var_legOrder,
        };
    }
}

impl SseDecode for crate::api::LegPositionEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::LegPositionEnum::FrontLeft,
            1 => crate::api::LegPositionEnum::FrontRight,
            2 => crate::api::LegPositionEnum::BackLeft,
            3 => crate::api::LegPositionEnum::BackRight,
            _ => unreachable!("Invalid variant for LegPositionEnum: {}", inner),
        };
    }
}

impl SseDecode for Vec<crate::api::AnalyticsRunTotalTimesModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::AnalyticsRunTotalTimesModel>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::LegBreakModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::LegBreakModel>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::PhaseModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::PhaseModel>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::RunListItemModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::RunListItemModel>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::ShieldChangeModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::ShieldChangeModel>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::SquadMemberModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::SquadMemberModel>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::RunTimesResponse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::RunTimesResponse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::TimeTypeModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::TimeTypeModel>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::PaginatedRunsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_runs = <Vec<crate::api::RunListItemModel>>::sse_decode(deserializer);
        let mut var_totalCount = <i32>::sse_decode(deserializer);
        return crate::api::PaginatedRunsResponse {
            runs: var_runs,
            total_count: var_totalCount,
        };
    }
}

impl SseDecode for crate::api::PhaseModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_phaseNumber = <i32>::sse_decode(deserializer);
        let mut var_totalTime = <f64>::sse_decode(deserializer);
        let mut var_totalShieldTime = <f64>::sse_decode(deserializer);
        let mut var_totalLegTime = <f64>::sse_decode(deserializer);
        let mut var_totalBodyKillTime = <f64>::sse_decode(deserializer);
        let mut var_totalPylonTime = <f64>::sse_decode(deserializer);
        let mut var_shieldChanges = <Vec<crate::api::ShieldChangeModel>>::sse_decode(deserializer);
        let mut var_legBreaks = <Vec<crate::api::LegBreakModel>>::sse_decode(deserializer);
        return crate::api::PhaseModel {
            phase_number: var_phaseNumber,
            total_time: var_totalTime,
            total_shield_time: var_totalShieldTime,
            total_leg_time: var_totalLegTime,
            total_body_kill_time: var_totalBodyKillTime,
            total_pylon_time: var_totalPylonTime,
            shield_changes: var_shieldChanges,
            leg_breaks: var_legBreaks,
        };
    }
}

impl SseDecode for crate::api::RunListItemModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i32>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_date = <i64>::sse_decode(deserializer);
        let mut var_duration = <f64>::sse_decode(deserializer);
        let mut var_isBugged = <bool>::sse_decode(deserializer);
        let mut var_isAborted = <bool>::sse_decode(deserializer);
        let mut var_isFavorite = <bool>::sse_decode(deserializer);
        return crate::api::RunListItemModel {
            id: var_id,
            name: var_name,
            date: var_date,
            duration: var_duration,
            is_bugged: var_isBugged,
            is_aborted: var_isAborted,
            is_favorite: var_isFavorite,
        };
    }
}

impl SseDecode for crate::api::RunModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_runId = <i32>::sse_decode(deserializer);
        let mut var_timeStamp = <i64>::sse_decode(deserializer);
        let mut var_runName = <String>::sse_decode(deserializer);
        let mut var_playerName = <String>::sse_decode(deserializer);
        let mut var_isBuggedRun = <bool>::sse_decode(deserializer);
        let mut var_isAbortedRun = <bool>::sse_decode(deserializer);
        let mut var_isSoloRun = <bool>::sse_decode(deserializer);
        let mut var_totalTimes = <crate::api::TotalTimesModel>::sse_decode(deserializer);
        let mut var_phases = <Vec<crate::api::PhaseModel>>::sse_decode(deserializer);
        let mut var_squadMembers = <Vec<crate::api::SquadMemberModel>>::sse_decode(deserializer);
        return crate::api::RunModel {
            run_id: var_runId,
            time_stamp: var_timeStamp,
            run_name: var_runName,
            player_name: var_playerName,
            is_bugged_run: var_isBuggedRun,
            is_aborted_run: var_isAbortedRun,
            is_solo_run: var_isSoloRun,
            total_times: var_totalTimes,
            phases: var_phases,
            squad_members: var_squadMembers,
        };
    }
}

impl SseDecode for crate::api::RunTimesResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_totalTime = <f64>::sse_decode(deserializer);
        let mut var_totalFlightTime = <f64>::sse_decode(deserializer);
        let mut var_totalShieldTime = <f64>::sse_decode(deserializer);
        let mut var_totalLegTime = <f64>::sse_decode(deserializer);
        let mut var_totalBodyTime = <f64>::sse_decode(deserializer);
        let mut var_totalPylonTime = <f64>::sse_decode(deserializer);
        return crate::api::RunTimesResponse {
            total_time: var_totalTime,
            total_flight_time: var_totalFlightTime,
            total_shield_time: var_totalShieldTime,
            total_leg_time: var_totalLegTime,
            total_body_time: var_totalBodyTime,
            total_pylon_time: var_totalPylonTime,
        };
    }
}

impl SseDecode for crate::api::ShieldChangeModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_shieldTime = <f64>::sse_decode(deserializer);
        let mut var_statusEffect = <crate::api::StatusEffectEnum>::sse_decode(deserializer);
        let mut var_shieldOrder = <i32>::sse_decode(deserializer);
        return crate::api::ShieldChangeModel {
            shield_time: var_shieldTime,
            status_effect: var_statusEffect,
            shield_order: var_shieldOrder,
        };
    }
}

impl SseDecode for crate::api::SquadMemberModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_memberName = <String>::sse_decode(deserializer);
        return crate::api::SquadMemberModel {
            member_name: var_memberName,
        };
    }
}

impl SseDecode for crate::api::StatusEffectEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::StatusEffectEnum::Impact,
            1 => crate::api::StatusEffectEnum::Puncture,
            2 => crate::api::StatusEffectEnum::Slash,
            3 => crate::api::StatusEffectEnum::Heat,
            4 => crate::api::StatusEffectEnum::Cold,
            5 => crate::api::StatusEffectEnum::Electric,
            6 => crate::api::StatusEffectEnum::Toxin,
            7 => crate::api::StatusEffectEnum::Blast,
            8 => crate::api::StatusEffectEnum::Radiation,
            9 => crate::api::StatusEffectEnum::Gas,
            10 => crate::api::StatusEffectEnum::Magnetic,
            11 => crate::api::StatusEffectEnum::Viral,
            12 => crate::api::StatusEffectEnum::Corrosive,
            13 => crate::api::StatusEffectEnum::NoShield,
            _ => unreachable!("Invalid variant for StatusEffectEnum: {}", inner),
        };
    }
}

impl SseDecode for crate::api::TimeTypeModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_totalTime = <f64>::sse_decode(deserializer);
        let mut var_flightTime = <f64>::sse_decode(deserializer);
        let mut var_shieldTime = <f64>::sse_decode(deserializer);
        let mut var_legTime = <f64>::sse_decode(deserializer);
        let mut var_bodyTime = <f64>::sse_decode(deserializer);
        let mut var_pylonTime = <f64>::sse_decode(deserializer);
        return crate::api::TimeTypeModel {
            total_time: var_totalTime,
            flight_time: var_flightTime,
            shield_time: var_shieldTime,
            leg_time: var_legTime,
            body_time: var_bodyTime,
            pylon_time: var_pylonTime,
        };
    }
}

impl SseDecode for crate::api::TotalTimesModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_totalDuration = <f64>::sse_decode(deserializer);
        let mut var_totalFlightTime = <f64>::sse_decode(deserializer);
        let mut var_totalShieldTime = <f64>::sse_decode(deserializer);
        let mut var_totalLegTime = <f64>::sse_decode(deserializer);
        let mut var_totalBodyTime = <f64>::sse_decode(deserializer);
        let mut var_totalPylonTime = <f64>::sse_decode(deserializer);
        return crate::api::TotalTimesModel {
            total_duration: var_totalDuration,
            total_flight_time: var_totalFlightTime,
            total_shield_time: var_totalShieldTime,
            total_leg_time: var_totalLegTime,
            total_body_time: var_totalBodyTime,
            total_pylon_time: var_totalPylonTime,
        };
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        10 => wire__crate__api__get_paginated_runs_impl(port, ptr, rust_vec_len, data_len),
        11 => wire__crate__api__get_pb_times_impl(port, ptr, rust_vec_len, data_len),
        14 => wire__crate__api__get_run_from_db_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__get_second_best_times_impl(port, ptr, rust_vec_len, data_len),
        16 => wire__crate__api__init_app_impl(port, ptr, rust_vec_len, data_len),
        17 => wire__crate__api__initialize_converter_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__check_if_latest_run_impl(ptr, rust_vec_len, data_len),
        2 => wire__crate__api__check_run_exists_impl(ptr, rust_vec_len, data_len),
        3 => wire__crate__api__check_run_favorite_impl(ptr, rust_vec_len, data_len),
        4 => wire__crate__api__delete_run_from_db_impl(ptr, rust_vec_len, data_len),
        5 => wire__crate__api__get_analytics_runs_impl(ptr, rust_vec_len, data_len),
        6 => wire__crate__api__get_average_times_impl(ptr, rust_vec_len, data_len),
        7 => wire__crate__api__get_earliest_run_id_impl(ptr, rust_vec_len, data_len),
        8 => wire__crate__api__get_latest_run_id_impl(ptr, rust_vec_len, data_len),
        9 => wire__crate__api__get_next_run_id_impl(ptr, rust_vec_len, data_len),
        12 => wire__crate__api__get_pretty_printed_run_impl(ptr, rust_vec_len, data_len),
        13 => wire__crate__api__get_previous_run_id_impl(ptr, rust_vec_len, data_len),
        18 => wire__crate__api__initialize_db_impl(ptr, rust_vec_len, data_len),
        19 => wire__crate__api__initialize_profit_taker_parser_impl(ptr, rust_vec_len, data_len),
        20 => wire__crate__api__is_run_pb_impl(ptr, rust_vec_len, data_len),
        21 => wire__crate__api__mark_run_as_favorite_impl(ptr, rust_vec_len, data_len),
        22 => wire__crate__api__remove_run_from_favorites_impl(ptr, rust_vec_len, data_len),
        23 => wire__crate__api__update_run_name_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AnalyticsRunTotalTimesModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.run_name.into_into_dart().into_dart(),
            self.total_time.into_into_dart().into_dart(),
            self.total_flight_time.into_into_dart().into_dart(),
            self.total_shield_time.into_into_dart().into_dart(),
            self.total_leg_time.into_into_dart().into_dart(),
            self.total_body_time.into_into_dart().into_dart(),
            self.total_pylon_time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::AnalyticsRunTotalTimesModel
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AnalyticsRunTotalTimesModel>
    for crate::api::AnalyticsRunTotalTimesModel
{
    fn into_into_dart(self) -> crate::api::AnalyticsRunTotalTimesModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::DeleteRunResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.success.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::DeleteRunResult {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::DeleteRunResult>
    for crate::api::DeleteRunResult
{
    fn into_into_dart(self) -> crate::api::DeleteRunResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::InitializeParserOutcome {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Success => 0.into_dart(),
            Self::EnvironmentVariableError => 1.into_dart(),
            Self::FileOpenError => 2.into_dart(),
            Self::FileSeekError => 3.into_dart(),
            Self::ThreadSpawnError => 4.into_dart(),
            Self::UnknownError => 5.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::InitializeParserOutcome
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::InitializeParserOutcome>
    for crate::api::InitializeParserOutcome
{
    fn into_into_dart(self) -> crate::api::InitializeParserOutcome {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::LegBreakModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.leg_break_time.into_into_dart().into_dart(),
            self.leg_position.into_into_dart().into_dart(),
            self.leg_order.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::LegBreakModel {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::LegBreakModel> for crate::api::LegBreakModel {
    fn into_into_dart(self) -> crate::api::LegBreakModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::LegPositionEnum {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::FrontLeft => 0.into_dart(),
            Self::FrontRight => 1.into_dart(),
            Self::BackLeft => 2.into_dart(),
            Self::BackRight => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::LegPositionEnum {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::LegPositionEnum>
    for crate::api::LegPositionEnum
{
    fn into_into_dart(self) -> crate::api::LegPositionEnum {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::PaginatedRunsResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.runs.into_into_dart().into_dart(),
            self.total_count.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::PaginatedRunsResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::PaginatedRunsResponse>
    for crate::api::PaginatedRunsResponse
{
    fn into_into_dart(self) -> crate::api::PaginatedRunsResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::PhaseModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.phase_number.into_into_dart().into_dart(),
            self.total_time.into_into_dart().into_dart(),
            self.total_shield_time.into_into_dart().into_dart(),
            self.total_leg_time.into_into_dart().into_dart(),
            self.total_body_kill_time.into_into_dart().into_dart(),
            self.total_pylon_time.into_into_dart().into_dart(),
            self.shield_changes.into_into_dart().into_dart(),
            self.leg_breaks.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::PhaseModel {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::PhaseModel> for crate::api::PhaseModel {
    fn into_into_dart(self) -> crate::api::PhaseModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::RunListItemModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.date.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.is_bugged.into_into_dart().into_dart(),
            self.is_aborted.into_into_dart().into_dart(),
            self.is_favorite.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::RunListItemModel {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::RunListItemModel>
    for crate::api::RunListItemModel
{
    fn into_into_dart(self) -> crate::api::RunListItemModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::RunModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.run_id.into_into_dart().into_dart(),
            self.time_stamp.into_into_dart().into_dart(),
            self.run_name.into_into_dart().into_dart(),
            self.player_name.into_into_dart().into_dart(),
            self.is_bugged_run.into_into_dart().into_dart(),
            self.is_aborted_run.into_into_dart().into_dart(),
            self.is_solo_run.into_into_dart().into_dart(),
            self.total_times.into_into_dart().into_dart(),
            self.phases.into_into_dart().into_dart(),
            self.squad_members.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::RunModel {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::RunModel> for crate::api::RunModel {
    fn into_into_dart(self) -> crate::api::RunModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::RunTimesResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total_time.into_into_dart().into_dart(),
            self.total_flight_time.into_into_dart().into_dart(),
            self.total_shield_time.into_into_dart().into_dart(),
            self.total_leg_time.into_into_dart().into_dart(),
            self.total_body_time.into_into_dart().into_dart(),
            self.total_pylon_time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::RunTimesResponse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::RunTimesResponse>
    for crate::api::RunTimesResponse
{
    fn into_into_dart(self) -> crate::api::RunTimesResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::ShieldChangeModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.shield_time.into_into_dart().into_dart(),
            self.status_effect.into_into_dart().into_dart(),
            self.shield_order.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::ShieldChangeModel {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::ShieldChangeModel>
    for crate::api::ShieldChangeModel
{
    fn into_into_dart(self) -> crate::api::ShieldChangeModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::SquadMemberModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.member_name.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::SquadMemberModel {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::SquadMemberModel>
    for crate::api::SquadMemberModel
{
    fn into_into_dart(self) -> crate::api::SquadMemberModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::StatusEffectEnum {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Impact => 0.into_dart(),
            Self::Puncture => 1.into_dart(),
            Self::Slash => 2.into_dart(),
            Self::Heat => 3.into_dart(),
            Self::Cold => 4.into_dart(),
            Self::Electric => 5.into_dart(),
            Self::Toxin => 6.into_dart(),
            Self::Blast => 7.into_dart(),
            Self::Radiation => 8.into_dart(),
            Self::Gas => 9.into_dart(),
            Self::Magnetic => 10.into_dart(),
            Self::Viral => 11.into_dart(),
            Self::Corrosive => 12.into_dart(),
            Self::NoShield => 13.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::StatusEffectEnum {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::StatusEffectEnum>
    for crate::api::StatusEffectEnum
{
    fn into_into_dart(self) -> crate::api::StatusEffectEnum {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::TimeTypeModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total_time.into_into_dart().into_dart(),
            self.flight_time.into_into_dart().into_dart(),
            self.shield_time.into_into_dart().into_dart(),
            self.leg_time.into_into_dart().into_dart(),
            self.body_time.into_into_dart().into_dart(),
            self.pylon_time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::TimeTypeModel {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::TimeTypeModel> for crate::api::TimeTypeModel {
    fn into_into_dart(self) -> crate::api::TimeTypeModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::TotalTimesModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total_duration.into_into_dart().into_dart(),
            self.total_flight_time.into_into_dart().into_dart(),
            self.total_shield_time.into_into_dart().into_dart(),
            self.total_leg_time.into_into_dart().into_dart(),
            self.total_body_time.into_into_dart().into_dart(),
            self.total_pylon_time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::TotalTimesModel {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::TotalTimesModel>
    for crate::api::TotalTimesModel
{
    fn into_into_dart(self) -> crate::api::TotalTimesModel {
        self
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::AnalyticsRunTotalTimesModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.run_name, serializer);
        <f64>::sse_encode(self.total_time, serializer);
        <f64>::sse_encode(self.total_flight_time, serializer);
        <f64>::sse_encode(self.total_shield_time, serializer);
        <f64>::sse_encode(self.total_leg_time, serializer);
        <f64>::sse_encode(self.total_body_time, serializer);
        <f64>::sse_encode(self.total_pylon_time, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::DeleteRunResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.success, serializer);
        <Option<String>>::sse_encode(self.error, serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::InitializeParserOutcome {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::InitializeParserOutcome::Success => 0,
                crate::api::InitializeParserOutcome::EnvironmentVariableError => 1,
                crate::api::InitializeParserOutcome::FileOpenError => 2,
                crate::api::InitializeParserOutcome::FileSeekError => 3,
                crate::api::InitializeParserOutcome::ThreadSpawnError => 4,
                crate::api::InitializeParserOutcome::UnknownError => 5,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::LegBreakModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.leg_break_time, serializer);
        <crate::api::LegPositionEnum>::sse_encode(self.leg_position, serializer);
        <i32>::sse_encode(self.leg_order, serializer);
    }
}

impl SseEncode for crate::api::LegPositionEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::LegPositionEnum::FrontLeft => 0,
                crate::api::LegPositionEnum::FrontRight => 1,
                crate::api::LegPositionEnum::BackLeft => 2,
                crate::api::LegPositionEnum::BackRight => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<crate::api::AnalyticsRunTotalTimesModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::AnalyticsRunTotalTimesModel>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::LegBreakModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::LegBreakModel>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::PhaseModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::PhaseModel>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::RunListItemModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::RunListItemModel>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::ShieldChangeModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::ShieldChangeModel>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::SquadMemberModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::SquadMemberModel>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::RunTimesResponse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::RunTimesResponse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::TimeTypeModel> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::TimeTypeModel>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::PaginatedRunsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::RunListItemModel>>::sse_encode(self.runs, serializer);
        <i32>::sse_encode(self.total_count, serializer);
    }
}

impl SseEncode for crate::api::PhaseModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.phase_number, serializer);
        <f64>::sse_encode(self.total_time, serializer);
        <f64>::sse_encode(self.total_shield_time, serializer);
        <f64>::sse_encode(self.total_leg_time, serializer);
        <f64>::sse_encode(self.total_body_kill_time, serializer);
        <f64>::sse_encode(self.total_pylon_time, serializer);
        <Vec<crate::api::ShieldChangeModel>>::sse_encode(self.shield_changes, serializer);
        <Vec<crate::api::LegBreakModel>>::sse_encode(self.leg_breaks, serializer);
    }
}

impl SseEncode for crate::api::RunListItemModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <i64>::sse_encode(self.date, serializer);
        <f64>::sse_encode(self.duration, serializer);
        <bool>::sse_encode(self.is_bugged, serializer);
        <bool>::sse_encode(self.is_aborted, serializer);
        <bool>::sse_encode(self.is_favorite, serializer);
    }
}

impl SseEncode for crate::api::RunModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.run_id, serializer);
        <i64>::sse_encode(self.time_stamp, serializer);
        <String>::sse_encode(self.run_name, serializer);
        <String>::sse_encode(self.player_name, serializer);
        <bool>::sse_encode(self.is_bugged_run, serializer);
        <bool>::sse_encode(self.is_aborted_run, serializer);
        <bool>::sse_encode(self.is_solo_run, serializer);
        <crate::api::TotalTimesModel>::sse_encode(self.total_times, serializer);
        <Vec<crate::api::PhaseModel>>::sse_encode(self.phases, serializer);
        <Vec<crate::api::SquadMemberModel>>::sse_encode(self.squad_members, serializer);
    }
}

impl SseEncode for crate::api::RunTimesResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.total_time, serializer);
        <f64>::sse_encode(self.total_flight_time, serializer);
        <f64>::sse_encode(self.total_shield_time, serializer);
        <f64>::sse_encode(self.total_leg_time, serializer);
        <f64>::sse_encode(self.total_body_time, serializer);
        <f64>::sse_encode(self.total_pylon_time, serializer);
    }
}

impl SseEncode for crate::api::ShieldChangeModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.shield_time, serializer);
        <crate::api::StatusEffectEnum>::sse_encode(self.status_effect, serializer);
        <i32>::sse_encode(self.shield_order, serializer);
    }
}

impl SseEncode for crate::api::SquadMemberModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.member_name, serializer);
    }
}

impl SseEncode for crate::api::StatusEffectEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::StatusEffectEnum::Impact => 0,
                crate::api::StatusEffectEnum::Puncture => 1,
                crate::api::StatusEffectEnum::Slash => 2,
                crate::api::StatusEffectEnum::Heat => 3,
                crate::api::StatusEffectEnum::Cold => 4,
                crate::api::StatusEffectEnum::Electric => 5,
                crate::api::StatusEffectEnum::Toxin => 6,
                crate::api::StatusEffectEnum::Blast => 7,
                crate::api::StatusEffectEnum::Radiation => 8,
                crate::api::StatusEffectEnum::Gas => 9,
                crate::api::StatusEffectEnum::Magnetic => 10,
                crate::api::StatusEffectEnum::Viral => 11,
                crate::api::StatusEffectEnum::Corrosive => 12,
                crate::api::StatusEffectEnum::NoShield => 13,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::TimeTypeModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.total_time, serializer);
        <f64>::sse_encode(self.flight_time, serializer);
        <f64>::sse_encode(self.shield_time, serializer);
        <f64>::sse_encode(self.leg_time, serializer);
        <f64>::sse_encode(self.body_time, serializer);
        <f64>::sse_encode(self.pylon_time, serializer);
    }
}

impl SseEncode for crate::api::TotalTimesModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.total_duration, serializer);
        <f64>::sse_encode(self.total_flight_time, serializer);
        <f64>::sse_encode(self.total_shield_time, serializer);
        <f64>::sse_encode(self.total_leg_time, serializer);
        <f64>::sse_encode(self.total_body_time, serializer);
        <f64>::sse_encode(self.total_pylon_time, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
